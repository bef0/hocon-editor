othertest {
    com {
        renamed {
            abc=70
        }
    }
}
renamedAgain {
    frontend {}
    module {
        account {
            admin {
                roles=[
                    "default/guest",
                    "default/verified",
                    "default/admin",
                    "default/gastronomy",
                    "default/servicestaff",
                    "default/scanner"
                ]
            }
            email {
                forgotPassword=test-forgot-password-email
                verificationKey=test-verification-email
            }
            # the user is able to update the password if his/her account is still unverified
            updateNeedsPwIfUnverified=false
        }
        address {
            google-api-key=""
            google-service-address=""
        }
        media {
            aws {
                s3 {
                    defaultBucket=media
                    region=""
                }
            }
            forceHttps=true
        }
        paypal {
            # we do not need IPN for test
            ipn-service-address=""
        }
        profile {
            attrs {
                # for business accounts
                companyName {
                    public=true
                    required=false
                    type="string(80)"
                }
                # The last used paymentType of that profile
                lastPaymentType {
                    public=false
                    required=false
                    type="ch.types.PaymentType"
                }
                # point-of-sale id assigned to administrative accounts
                relatedPosId {
                    index=true
                    public=false
                    required=false
                    type=UUID
                }
            }
        }
        push {
            firebase {
                privateKeyFile=""
                projectId=""
            }
            webpush {
                privateKey=""
            }
        }
        rest-service {
            http {}
        }
        send-email {
            aws {
                ses {
                    region=""
                }
            }
            fromEmail=""
        }
        # test admin module
        test-admin {
            menu-card-item-categories=[
                #                  Mittagstisch
                {
                    allergens=optional
                    image=optional
                    isDiscountable=true
                    name=dish
                    subcategories=[]
                    tags=optional
                }
            ]
        }
        test-admin-cockpit {}
        test-background-tasks {
            # direct-orders have a period where they're valid and can be used to pick-up
            deleteDirectOrdersAfter="15d"
        }
        test-order {}
        typed-entity {
            # TODO prefer to use get-filtered-entities with sortBy message instead
            defaultSort=sortOrder
            dontHistorizeTypes=[
                order
            ]
            enableHistorization=true
            types {
                location {
                    # any
                    access-types=null
                    attrs {
                        addressDetailInfo {
                            required=false
                            type="string(255)"
                        }
                        city {
                            required=true
                            type="string(255)"
                        }
                        country {
                            required=true
                            type="string(255)"
                        }
                        postCode {
                            required=true
                            type="string(10)"
                        }
                        streetAndNumber {
                            required=true
                            type="string(255)"
                        }
                    }
                    child-types=[
                        pointOfSale
                    ]
                    service-module=null
                }
                menuCard {
                    # any
                    access-types=null
                    attrs {
                        # direct order valid for X days
                        directOrderFor {
                            required=true
                            type=short
                        }
                        # pre order allowed until X minutes before end of timeslot
                        preOrderUntil {
                            required=true
                            type=short
                        }
                    }
                    child-types=[
                        menuCardItem
                    ]
                    service-module=null
                }
                menuCardItem {
                    # any
                    access-types=null
                    attrs {
                        allergens {
                            required=false
                            type="string(255)"
                        }
                        availabilities {
                            required=true
                            type="ch.test.types.MenuCardItemAvailability[]"
                        }
                        category {
                            index=true
                            required=true
                            type="string(80)"
                        }
                        firstAvailable {
                            index=true
                            required=false
                            type=date
                        }
                        lastAvailable {
                            index=true
                            required=false
                            type=date
                        }
                        netPrice {
                            required=true
                            type=double
                        }
                        price {
                            required=true
                            type=double
                        }
                        subcategory {
                            required=false
                            type="string(80)"
                        }
                    }
                    child-types=[]
                    service-module=null
                }
                order {
                    # any
                    access-types=null
                    attrs {
                        charged {
                            public=false
                            readOnly=true
                            required=false
                            type=double
                        }
                        checkedInDate {
                            public=false
                            readOnly=true
                            required=false
                            type=datetime
                        }
                        directOrder {
                            public=false
                            readOnly=true
                            required=true
                            type=boolean
                        }
                        discountPreOrder {
                            public=false
                            readOnly=true
                            required=true
                            type=double
                        }
                        discountTimeslot {
                            public=false
                            readOnly=true
                            required=true
                            type=double
                        }
                        invoiceNr {
                            index=false
                            public=false
                            readOnly=true
                            required=false
                            type=long
                        }
                        lastStateChange {
                            public=false
                            readOnly=true
                            required=true
                            type=datetime
                        }
                        menuCardId {
                            index=true
                            public=false
                            readOnly=true
                            required=true
                            type=UUID
                        }
                        netPrice {
                            public=false
                            readOnly=true
                            required=true
                            type=double
                        }
                        orderDate {
                            public=false
                            readOnly=true
                            required=false
                            type=datetime
                        }
                        orderItems {
                            public=false
                            readOnly=true
                            required=true
                            type="ch.test.types.OrderItem[]"
                        }
                        orderSecret {
                            public=false
                            readOnly=true
                            required=false
                            type="string(18)"
                        }
                        # state attributes
                        orderState {
                            index=true
                            public=false
                            readOnly=true
                            required=true
                            type="ch.test.types.OrderState"
                        }
                        paymentType {
                            public=false
                            readOnly=true
                            required=false
                            type="ch.test.types.PaymentType"
                        }
                        pickUpDate {
                            index=true
                            public=false
                            readOnly=true
                            required=true
                            type=date
                        }
                        pickUpTime {
                            public=false
                            readOnly=true
                            required=false
                            type=time
                        }
                        # identifiers
                        pointOfSaleId {
                            index=true
                            public=false
                            readOnly=true
                            required=true
                            type=UUID
                        }
                        preOrderDiscountPerMainDish {
                            public=false
                            readOnly=true
                            required=true
                            type=double
                        }
                        # price attributes
                        price {
                            public=false
                            readOnly=true
                            required=true
                            type=double
                        }
                        reminder {
                            public=false
                            readOnly=true
                            required=false
                            type=datetime
                        }
                        timeslotDiscountPerMainDish {
                            public=false
                            readOnly=true
                            required=true
                            type=double
                        }
                        total {
                            public=false
                            readOnly=true
                            required=true
                            type=double
                        }
                        transactionId {
                            public=false
                            readOnly=true
                            required=false
                            type="string(80)"
                        }
                    }
                    child-types=[]
                    service-module=null
                }
                pointOfSale {
                    # any
                    access-types=null
                    attrs {
                        activeMenuCardId {
                            required=false
                            type=UUID
                        }
                        openingHours {
                            required=true
                            type="ch.test.types.OpeningHours"
                        }
                    }
                    child-types=[
                        menuCard
                    ]
                    service-module=null
                }
            }
        }
    }
    mytest {
        newCom {
            abc="56"
        }
        otherCom=false
    }
}
